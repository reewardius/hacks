package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"runtime"
	"strings"
	"time"
)

var Reset = "\033[0m"
var Red = "\033[31m"
var Green = "\033[32m"

func main() {
	if runtime.GOOS == "windows" {
		Reset = ""
		Red = ""
		Green = ""
	}

	helpPtr := flag.Bool("h", false, "Show usage.")
	payloadPtr := flag.String("p", "", "Input payload.")

	flag.Parse()

	if *helpPtr {
		help()
	}

	if *payloadPtr != "" {
		TestWAF(*payloadPtr)
	} else {
		fmt.Println("Payload required.")
		os.Exit(1)
	}
}

// help shows the usage.
func help() {
	var usage = `Take as input on stdin a payload and print on stdout all the successful WAF bypasses.
	$> checkbypass -p "<script>alert()</script>"`

	fmt.Println()
	fmt.Println(usage)
	fmt.Println()
	os.Exit(0)
}

// ReplaceParameters.
func ReplaceParameters(input string, payload string) string {
	u, err := url.Parse(input)
	if err != nil {
		return ""
	}

	decodedValue, err := url.QueryUnescape(u.RawQuery)
	if err != nil {
		return ""
	}

	var queryResult = ""

	couples := strings.Split(decodedValue, "&")
	for _, pair := range couples {
		values := strings.Split(pair, "=")
		queryResult += values[0] + "=" + url.QueryEscape(payload) + "&"
	}

	return u.Scheme + "://" + u.Host + u.Path + "?" + queryResult[:len(queryResult)-1]
}

// GetRequest performs a GET request.
func GetRequest(target string) (string, error) {
	var netClient = &http.Client{
		Timeout: time.Second * 20,
	}

	resp, err := netClient.Get(target)
	if err != nil {
		return "", err
	}

	defer resp.Body.Close()

	// We Read the response body on the line below.
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	// Convert the body to type string.
	sb := string(body)

	return sb, nil
}

type WAF struct {
	Name          string
	URL           string
	BlockedString string
}

var wafs = []WAF{
	{"Cloudflare",
		"https://www.cloudflare.com/",
		"you have been blocked"},
	{"Akamai",
		"https://www.akamai.com/",
		"You don't have permission to access"},
	{"F5",
		"https://www.f5.com/",
		"The requested URL was rejected. Please consult with your administrator."},
	{"CloudFront",
		"https://docs.aws.amazon.com/",
		"Generated by cloudfront (CloudFront)"},
	{"Imperva",
		"https://www.imperva.com/",
		"Request unsuccessful. Incapsula incident ID"},
	{"Sucuri",
		"https://sucuri.net/",
		"Sucuri WebSite Firewall - Access Denied"},
}

// TestWAF.
func TestWAF(payload string) {
	var distance = 12

	for _, elem := range wafs {
		url := ReplaceParameters(elem.URL, "test="+payload)

		resp, err := GetRequest(url)
		if err != nil {
			fmt.Println(Red + "[ ERROR:-( ] " + Reset + err.Error())
			continue
		}

		if strings.Contains(resp, elem.BlockedString) {
			fmt.Println(Red + "[ BLOCKED! ] " + Reset + elem.Name + strings.Repeat(" ", distance-len(elem.Name)) + " : " + url)
			continue
		}

		fmt.Println(Green + "[ BYPASSED ] " + Reset + elem.Name + strings.Repeat(" ", distance-len(elem.Name)) + " : " + url)
	}
}